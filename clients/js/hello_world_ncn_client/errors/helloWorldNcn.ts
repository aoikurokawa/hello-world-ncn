/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { HELLO_WORLD_NCN_PROGRAM_ADDRESS } from '../programs';

/** NcnPortalWhitelistAdminInvalid: NcnPortalWhitelistAdminInvalid */
export const HELLO_WORLD_NCN_ERROR__NCN_PORTAL_WHITELIST_ADMIN_INVALID = 0x0; // 0
/** NcnPortalParentInvalid: NcnPortalParentInvalid */
export const HELLO_WORLD_NCN_ERROR__NCN_PORTAL_PARENT_INVALID = 0x1; // 1
/** NcnPortalWhitelistedInvalid: NcnPortalWhitelistedInvalid */
export const HELLO_WORLD_NCN_ERROR__NCN_PORTAL_WHITELISTED_INVALID = 0x2; // 2
/** ConsensusAlreadyReached: ConsensusAlreadyReached */
export const HELLO_WORLD_NCN_ERROR__CONSENSUS_ALREADY_REACHED = 0x3; // 3
/** OperatorVotesFull: OperatorVotesFull */
export const HELLO_WORLD_NCN_ERROR__OPERATOR_VOTES_FULL = 0x4; // 4
/** ArithmeticOverflow: ArithmeticOverflow */
export const HELLO_WORLD_NCN_ERROR__ARITHMETIC_OVERFLOW = 0xbb8; // 3000
/** ArithmeticUnderflow: ArithmeticUnderflow */
export const HELLO_WORLD_NCN_ERROR__ARITHMETIC_UNDERFLOW = 0xbb9; // 3001
/** DivisionByZero: DivisionByZero */
export const HELLO_WORLD_NCN_ERROR__DIVISION_BY_ZERO = 0xbba; // 3002

export type HelloWorldNcnError =
  | typeof HELLO_WORLD_NCN_ERROR__ARITHMETIC_OVERFLOW
  | typeof HELLO_WORLD_NCN_ERROR__ARITHMETIC_UNDERFLOW
  | typeof HELLO_WORLD_NCN_ERROR__CONSENSUS_ALREADY_REACHED
  | typeof HELLO_WORLD_NCN_ERROR__DIVISION_BY_ZERO
  | typeof HELLO_WORLD_NCN_ERROR__NCN_PORTAL_PARENT_INVALID
  | typeof HELLO_WORLD_NCN_ERROR__NCN_PORTAL_WHITELIST_ADMIN_INVALID
  | typeof HELLO_WORLD_NCN_ERROR__NCN_PORTAL_WHITELISTED_INVALID
  | typeof HELLO_WORLD_NCN_ERROR__OPERATOR_VOTES_FULL;

let helloWorldNcnErrorMessages: Record<HelloWorldNcnError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  helloWorldNcnErrorMessages = {
    [HELLO_WORLD_NCN_ERROR__ARITHMETIC_OVERFLOW]: `ArithmeticOverflow`,
    [HELLO_WORLD_NCN_ERROR__ARITHMETIC_UNDERFLOW]: `ArithmeticUnderflow`,
    [HELLO_WORLD_NCN_ERROR__CONSENSUS_ALREADY_REACHED]: `ConsensusAlreadyReached`,
    [HELLO_WORLD_NCN_ERROR__DIVISION_BY_ZERO]: `DivisionByZero`,
    [HELLO_WORLD_NCN_ERROR__NCN_PORTAL_PARENT_INVALID]: `NcnPortalParentInvalid`,
    [HELLO_WORLD_NCN_ERROR__NCN_PORTAL_WHITELIST_ADMIN_INVALID]: `NcnPortalWhitelistAdminInvalid`,
    [HELLO_WORLD_NCN_ERROR__NCN_PORTAL_WHITELISTED_INVALID]: `NcnPortalWhitelistedInvalid`,
    [HELLO_WORLD_NCN_ERROR__OPERATOR_VOTES_FULL]: `OperatorVotesFull`,
  };
}

export function getHelloWorldNcnErrorMessage(code: HelloWorldNcnError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (helloWorldNcnErrorMessages as Record<HelloWorldNcnError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isHelloWorldNcnError<
  TProgramErrorCode extends HelloWorldNcnError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    HELLO_WORLD_NCN_PROGRAM_ADDRESS,
    code
  );
}
