/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { HELLO_WORLD_NCN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_BALLOT_BOX_DISCRIMINATOR = 1;

export function getInitializeBallotBoxDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_BALLOT_BOX_DISCRIMINATOR);
}

export type InitializeBallotBoxInstruction<
  TProgram extends string = typeof HELLO_WORLD_NCN_PROGRAM_ADDRESS,
  TAccountConfigInfo extends string | IAccountMeta<string> = string,
  TAccountNcnInfo extends string | IAccountMeta<string> = string,
  TAccountBallotBoxInfo extends string | IAccountMeta<string> = string,
  TAccountNcnAdminInfo extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfigInfo extends string
        ? ReadonlyAccount<TAccountConfigInfo>
        : TAccountConfigInfo,
      TAccountNcnInfo extends string
        ? ReadonlyAccount<TAccountNcnInfo>
        : TAccountNcnInfo,
      TAccountBallotBoxInfo extends string
        ? WritableAccount<TAccountBallotBoxInfo>
        : TAccountBallotBoxInfo,
      TAccountNcnAdminInfo extends string
        ? WritableSignerAccount<TAccountNcnAdminInfo> &
            IAccountSignerMeta<TAccountNcnAdminInfo>
        : TAccountNcnAdminInfo,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeBallotBoxInstructionData = { discriminator: number };

export type InitializeBallotBoxInstructionDataArgs = {};

export function getInitializeBallotBoxInstructionDataEncoder(): Encoder<InitializeBallotBoxInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_BALLOT_BOX_DISCRIMINATOR,
    })
  );
}

export function getInitializeBallotBoxInstructionDataDecoder(): Decoder<InitializeBallotBoxInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializeBallotBoxInstructionDataCodec(): Codec<
  InitializeBallotBoxInstructionDataArgs,
  InitializeBallotBoxInstructionData
> {
  return combineCodec(
    getInitializeBallotBoxInstructionDataEncoder(),
    getInitializeBallotBoxInstructionDataDecoder()
  );
}

export type InitializeBallotBoxInput<
  TAccountConfigInfo extends string = string,
  TAccountNcnInfo extends string = string,
  TAccountBallotBoxInfo extends string = string,
  TAccountNcnAdminInfo extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  configInfo: Address<TAccountConfigInfo>;
  ncnInfo: Address<TAccountNcnInfo>;
  ballotBoxInfo: Address<TAccountBallotBoxInfo>;
  ncnAdminInfo: TransactionSigner<TAccountNcnAdminInfo>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeBallotBoxInstruction<
  TAccountConfigInfo extends string,
  TAccountNcnInfo extends string,
  TAccountBallotBoxInfo extends string,
  TAccountNcnAdminInfo extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof HELLO_WORLD_NCN_PROGRAM_ADDRESS,
>(
  input: InitializeBallotBoxInput<
    TAccountConfigInfo,
    TAccountNcnInfo,
    TAccountBallotBoxInfo,
    TAccountNcnAdminInfo,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeBallotBoxInstruction<
  TProgramAddress,
  TAccountConfigInfo,
  TAccountNcnInfo,
  TAccountBallotBoxInfo,
  TAccountNcnAdminInfo,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? HELLO_WORLD_NCN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    configInfo: { value: input.configInfo ?? null, isWritable: false },
    ncnInfo: { value: input.ncnInfo ?? null, isWritable: false },
    ballotBoxInfo: { value: input.ballotBoxInfo ?? null, isWritable: true },
    ncnAdminInfo: { value: input.ncnAdminInfo ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.configInfo),
      getAccountMeta(accounts.ncnInfo),
      getAccountMeta(accounts.ballotBoxInfo),
      getAccountMeta(accounts.ncnAdminInfo),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeBallotBoxInstructionDataEncoder().encode({}),
  } as InitializeBallotBoxInstruction<
    TProgramAddress,
    TAccountConfigInfo,
    TAccountNcnInfo,
    TAccountBallotBoxInfo,
    TAccountNcnAdminInfo,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeBallotBoxInstruction<
  TProgram extends string = typeof HELLO_WORLD_NCN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    configInfo: TAccountMetas[0];
    ncnInfo: TAccountMetas[1];
    ballotBoxInfo: TAccountMetas[2];
    ncnAdminInfo: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeBallotBoxInstructionData;
};

export function parseInitializeBallotBoxInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeBallotBoxInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      configInfo: getNextAccount(),
      ncnInfo: getNextAccount(),
      ballotBoxInfo: getNextAccount(),
      ncnAdminInfo: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeBallotBoxInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
