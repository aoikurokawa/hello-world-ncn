/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedInitializeBallotBoxInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedRequestMessageInstruction,
  type ParsedSubmitMessageInstruction,
} from '../instructions';

export const HELLO_WORLD_NCN_PROGRAM_ADDRESS =
  'ncncd27gXkYMV56EfwntDmYhH5Wzo896yTnrBbEq9xW' as Address<'ncncd27gXkYMV56EfwntDmYhH5Wzo896yTnrBbEq9xW'>;

export enum HelloWorldNcnAccount {
  BallotBox,
  Config,
  Message,
}

export enum HelloWorldNcnInstruction {
  InitializeConfig,
  InitializeBallotBox,
  RequestMessage,
  SubmitMessage,
}

export function identifyHelloWorldNcnInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): HelloWorldNcnInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return HelloWorldNcnInstruction.InitializeConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return HelloWorldNcnInstruction.InitializeBallotBox;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return HelloWorldNcnInstruction.RequestMessage;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return HelloWorldNcnInstruction.SubmitMessage;
  }
  throw new Error(
    'The provided instruction could not be identified as a helloWorldNcn instruction.'
  );
}

export type ParsedHelloWorldNcnInstruction<
  TProgram extends string = 'ncncd27gXkYMV56EfwntDmYhH5Wzo896yTnrBbEq9xW',
> =
  | ({
      instructionType: HelloWorldNcnInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: HelloWorldNcnInstruction.InitializeBallotBox;
    } & ParsedInitializeBallotBoxInstruction<TProgram>)
  | ({
      instructionType: HelloWorldNcnInstruction.RequestMessage;
    } & ParsedRequestMessageInstruction<TProgram>)
  | ({
      instructionType: HelloWorldNcnInstruction.SubmitMessage;
    } & ParsedSubmitMessageInstruction<TProgram>);
