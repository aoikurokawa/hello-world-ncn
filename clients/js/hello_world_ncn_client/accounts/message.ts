/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export type Message = {
  discriminator: bigint;
  ncn: Address;
  epoch: bigint;
  keywordLen: number;
  keyword: ReadonlyUint8Array;
};

export type MessageArgs = {
  discriminator: number | bigint;
  ncn: Address;
  epoch: number | bigint;
  keywordLen: number;
  keyword: ReadonlyUint8Array;
};

export function getMessageEncoder(): Encoder<MessageArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['ncn', getAddressEncoder()],
    ['epoch', getU64Encoder()],
    ['keywordLen', getU8Encoder()],
    ['keyword', fixEncoderSize(getBytesEncoder(), 64)],
  ]);
}

export function getMessageDecoder(): Decoder<Message> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['ncn', getAddressDecoder()],
    ['epoch', getU64Decoder()],
    ['keywordLen', getU8Decoder()],
    ['keyword', fixDecoderSize(getBytesDecoder(), 64)],
  ]);
}

export function getMessageCodec(): Codec<MessageArgs, Message> {
  return combineCodec(getMessageEncoder(), getMessageDecoder());
}

export function decodeMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Message, TAddress>;
export function decodeMessage<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Message, TAddress>;
export function decodeMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Message, TAddress> | MaybeAccount<Message, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMessageDecoder()
  );
}

export async function fetchMessage<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Message, TAddress>> {
  const maybeAccount = await fetchMaybeMessage(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMessage<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Message, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMessage(maybeAccount);
}

export async function fetchAllMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Message>[]> {
  const maybeAccounts = await fetchAllMaybeMessage(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Message>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMessage(maybeAccount));
}
