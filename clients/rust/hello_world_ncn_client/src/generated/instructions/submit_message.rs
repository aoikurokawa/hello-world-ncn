//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct SubmitMessage {
    pub config_info: solana_program::pubkey::Pubkey,

    pub ncn_info: solana_program::pubkey::Pubkey,

    pub operator_info: solana_program::pubkey::Pubkey,

    pub message_info: solana_program::pubkey::Pubkey,

    pub ballot_box_info: solana_program::pubkey::Pubkey,

    pub operator_voter_info: solana_program::pubkey::Pubkey,
}

impl SubmitMessage {
    pub fn instruction(
        &self,
        args: SubmitMessageInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SubmitMessageInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.config_info,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ncn_info,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.operator_info,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.message_info,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.ballot_box_info,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.operator_voter_info,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = SubmitMessageInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::HELLO_WORLD_NCN_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct SubmitMessageInstructionData {
    discriminator: u8,
}

impl SubmitMessageInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 3 }
    }
}

impl Default for SubmitMessageInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SubmitMessageInstructionArgs {
    pub message: String,
}

/// Instruction builder for `SubmitMessage`.
///
/// ### Accounts:
///
///   0. `[writable]` config_info
///   1. `[]` ncn_info
///   2. `[]` operator_info
///   3. `[]` message_info
///   4. `[writable]` ballot_box_info
///   5. `[writable, signer]` operator_voter_info
#[derive(Clone, Debug, Default)]
pub struct SubmitMessageBuilder {
    config_info: Option<solana_program::pubkey::Pubkey>,
    ncn_info: Option<solana_program::pubkey::Pubkey>,
    operator_info: Option<solana_program::pubkey::Pubkey>,
    message_info: Option<solana_program::pubkey::Pubkey>,
    ballot_box_info: Option<solana_program::pubkey::Pubkey>,
    operator_voter_info: Option<solana_program::pubkey::Pubkey>,
    message: Option<String>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SubmitMessageBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn config_info(&mut self, config_info: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config_info = Some(config_info);
        self
    }
    #[inline(always)]
    pub fn ncn_info(&mut self, ncn_info: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ncn_info = Some(ncn_info);
        self
    }
    #[inline(always)]
    pub fn operator_info(&mut self, operator_info: solana_program::pubkey::Pubkey) -> &mut Self {
        self.operator_info = Some(operator_info);
        self
    }
    #[inline(always)]
    pub fn message_info(&mut self, message_info: solana_program::pubkey::Pubkey) -> &mut Self {
        self.message_info = Some(message_info);
        self
    }
    #[inline(always)]
    pub fn ballot_box_info(
        &mut self,
        ballot_box_info: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ballot_box_info = Some(ballot_box_info);
        self
    }
    #[inline(always)]
    pub fn operator_voter_info(
        &mut self,
        operator_voter_info: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.operator_voter_info = Some(operator_voter_info);
        self
    }
    #[inline(always)]
    pub fn message(&mut self, message: String) -> &mut Self {
        self.message = Some(message);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SubmitMessage {
            config_info: self.config_info.expect("config_info is not set"),
            ncn_info: self.ncn_info.expect("ncn_info is not set"),
            operator_info: self.operator_info.expect("operator_info is not set"),
            message_info: self.message_info.expect("message_info is not set"),
            ballot_box_info: self.ballot_box_info.expect("ballot_box_info is not set"),
            operator_voter_info: self
                .operator_voter_info
                .expect("operator_voter_info is not set"),
        };
        let args = SubmitMessageInstructionArgs {
            message: self.message.clone().expect("message is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `submit_message` CPI accounts.
pub struct SubmitMessageCpiAccounts<'a, 'b> {
    pub config_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub ncn_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub message_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub ballot_box_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_voter_info: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `submit_message` CPI instruction.
pub struct SubmitMessageCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub ncn_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub message_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub ballot_box_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_voter_info: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SubmitMessageInstructionArgs,
}

impl<'a, 'b> SubmitMessageCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SubmitMessageCpiAccounts<'a, 'b>,
        args: SubmitMessageInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config_info: accounts.config_info,
            ncn_info: accounts.ncn_info,
            operator_info: accounts.operator_info,
            message_info: accounts.message_info,
            ballot_box_info: accounts.ballot_box_info,
            operator_voter_info: accounts.operator_voter_info,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config_info.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ncn_info.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.operator_info.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.message_info.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ballot_box_info.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.operator_voter_info.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = SubmitMessageInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::HELLO_WORLD_NCN_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config_info.clone());
        account_infos.push(self.ncn_info.clone());
        account_infos.push(self.operator_info.clone());
        account_infos.push(self.message_info.clone());
        account_infos.push(self.ballot_box_info.clone());
        account_infos.push(self.operator_voter_info.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SubmitMessage` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` config_info
///   1. `[]` ncn_info
///   2. `[]` operator_info
///   3. `[]` message_info
///   4. `[writable]` ballot_box_info
///   5. `[writable, signer]` operator_voter_info
#[derive(Clone, Debug)]
pub struct SubmitMessageCpiBuilder<'a, 'b> {
    instruction: Box<SubmitMessageCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SubmitMessageCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SubmitMessageCpiBuilderInstruction {
            __program: program,
            config_info: None,
            ncn_info: None,
            operator_info: None,
            message_info: None,
            ballot_box_info: None,
            operator_voter_info: None,
            message: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn config_info(
        &mut self,
        config_info: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config_info = Some(config_info);
        self
    }
    #[inline(always)]
    pub fn ncn_info(
        &mut self,
        ncn_info: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ncn_info = Some(ncn_info);
        self
    }
    #[inline(always)]
    pub fn operator_info(
        &mut self,
        operator_info: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator_info = Some(operator_info);
        self
    }
    #[inline(always)]
    pub fn message_info(
        &mut self,
        message_info: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.message_info = Some(message_info);
        self
    }
    #[inline(always)]
    pub fn ballot_box_info(
        &mut self,
        ballot_box_info: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ballot_box_info = Some(ballot_box_info);
        self
    }
    #[inline(always)]
    pub fn operator_voter_info(
        &mut self,
        operator_voter_info: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator_voter_info = Some(operator_voter_info);
        self
    }
    #[inline(always)]
    pub fn message(&mut self, message: String) -> &mut Self {
        self.instruction.message = Some(message);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SubmitMessageInstructionArgs {
            message: self
                .instruction
                .message
                .clone()
                .expect("message is not set"),
        };
        let instruction = SubmitMessageCpi {
            __program: self.instruction.__program,

            config_info: self
                .instruction
                .config_info
                .expect("config_info is not set"),

            ncn_info: self.instruction.ncn_info.expect("ncn_info is not set"),

            operator_info: self
                .instruction
                .operator_info
                .expect("operator_info is not set"),

            message_info: self
                .instruction
                .message_info
                .expect("message_info is not set"),

            ballot_box_info: self
                .instruction
                .ballot_box_info
                .expect("ballot_box_info is not set"),

            operator_voter_info: self
                .instruction
                .operator_voter_info
                .expect("operator_voter_info is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SubmitMessageCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ncn_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operator_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    message_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ballot_box_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operator_voter_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    message: Option<String>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
